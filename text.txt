%% Optimization
%
%% Define the objective function for the optimizer
%function loss = objective_function(params, f, Z_exp)
%  Rs = params(1)
%  Rc = params(2)
%  Cd = params(3)
%
%  Zt = compute_abs_Zt(f, Rs, Rc, Cd);
%  loss = rmse_loss(Zt, Z_exp);
%end
%
%% Initial guess for the parameters [Rs, Rc, Cd]
%initial_params = [Rs, Rc, Cd];
%
%% Set the bounds for the parameters [Rs, Rc, Cd]
%lb = [1e2, 1e6, 1e-9];  % lower bounds
%ub = [1e3, 1e7, 1e-7];  % upper bounds
%
%% Set options for the optimizer
%options = optimset('Display', 'iter', 'Algorithm', 'interior-point');
%
%% Run the optimization
%[optimized_params, fval] = fmincon(@(params) objective_function(params, f, Z_exp), ...
%    initial_params, [], [], [], [], lb, ub, [], options)















% Data from experimentation
f = [1, 1.0449, 1.0919, 1.1409, 1.1922, 1.2458, 1.3018, 1.3603, 1.4214, 1.4853, 1.552, 1.6217, 1.6946, 1.7707, 1.8503, 1.9335, 2.0203, 2.1111, 2.206, 2.3051, 2.4087, 2.5169, 2.63, 2.7482, 2.8717, 3.0007, 3.1355, 3.2764, 3.4236, 3.5775, 3.7382, 3.9062, 4.0817, 4.2651, 4.4568, 4.657, 4.8663, 5.085, 5.3135, 5.5522, 5.8017, 6.0624, 6.3348, 6.6194, 6.9169, 7.2277, 7.5524, 7.8918, 8.2464, 8.617, 9.0042, 9.4088, 9.8315, 10.273, 10.735, 11.217, 11.721, 12.248, 12.798, 13.373, 13.974, 14.602, 15.258, 15.944, 16.66, 17.409, 18.191, 19.009, 19.863, 20.755, 21.688, 22.663, 23.681, 24.745, 25.857, 27.019, 28.233, 29.501, 30.827, 32.212, 33.66, 35.172, 36.752, 38.404, 40.13, 41.933, 43.817, 45.786, 47.843, 49.993, 52.239, 54.587, 57.039, 59.602, 62.281, 65.079, 68.003, 71.059, 74.252, 77.589, 81.075, 84.718, 88.525, 92.502, 96.659, 101, 105.54, 110.28, 115.24, 120.42, 125.83, 131.48, 137.39, 143.56, 150.01, 156.75, 163.8, 171.16, 178.85, 186.89, 195.28, 204.06, 213.23, 222.81, 232.82, 243.28, 254.21, 265.64, 277.57, 290.04, 303.08, 316.69, 330.93, 345.8, 361.33, 377.57, 394.53, 412.26, 430.79, 450.14, 470.37, 491.51, 513.59, 536.67, 560.78, 585.98, 612.31, 639.83, 668.58, 698.62, 730.01, 762.81, 797.09, 832.91, 870.33, 909.44, 950.3, 993.01, 1037.6, 1084.2, 1133, 1183.9, 1237.1, 1292.7, 1350.7, 1411.4, 1474.9, 1541.1, 1610.4, 1682.7, 1758.4, 1837.4, 1919.9, 2006.2, 2096.3, 2190.5, 2289, 2391.8, 2499.3, 2611.6, 2728.9, 2851.6, 2979.7, 3113.6, 3253.5, 3399.7, 3552.5, 3712.1, 3878.9, 4053.2, 4235.3, 4425.6, 4624.5, 4832.3, 5049.4, 5276.3, 5513.4, 5761.1, 6020, 6290.5, 6573.1, 6868.5, 7177.1, 7499.6, 7836.6, 8188.7, 8556.7, 8941.2, 9342.9, 9762.8, 10201, 10660, 11139, 11639, 12162, 12709, 13280, 13877, 14500, 15152, 15833, 16544, 17287, 18064, 18876, 19724, 20610, 21536, 22504, 23515, 24572, 25676, 26830, 28035, 29295, 30611, 31987, 33424, 34926, 36495, 38135, 39849, 41639, 43510, 45466, 47509, 49643, 51874, 54205, 56640, 59186, 61845, 64624, 67528, 70562, 73733, 77046, 80508, 84125, 87905, 91855, 95983, 100000, 105000, 110000, 114000, 120000, 125000, 131000, 136000, 143000, 149000, 156000, 163000, 170000, 178000, 186000, 194000, 203000, 212000, 221000, 231000, 242000, 252000, 264000, 276000, 288000, 301000, 314000, 329000, 343000, 359000, 375000, 392000, 409000, 428000, 447000, 467000, 488000, 510000];
Z_exp = [2.40E+06, 2.29E+06, 2.19E+06, 2.11E+06, 2.03E+06, 1.94E+06, 1.86E+06, 1.79E+06, 1.71E+06, 1.64E+06, 1.58E+06, 1.51E+06, 1.45E+06, 1.39E+06, 1.33E+06, 1.28E+06, 1.22E+06, 1.17E+06, 1.12E+06, 1.08E+06, 1.03E+06, 9.91E+05, 9.50E+05, 9.10E+05, 8.72E+05, 8.36E+05, 8.02E+05, 7.68E+05, 7.37E+05, 7.06E+05, 6.76E+05, 6.48E+05, 6.21E+05, 5.96E+05, 5.70E+05, 5.47E+05, 5.24E+05, 5.02E+05, 4.81E+05, 4.61E+05, 4.42E+05, 4.23E+05, 4.06E+05, 3.89E+05, 3.72E+05, 3.57E+05, 3.42E+05, 3.28E+05, 3.14E+05, 3.01E+05, 2.88E+05, 2.76E+05, 2.65E+05, 2.54E+05, 2.43E+05, 2.33E+05, 2.23E+05, 2.14E+05, 2.05E+05, 1.96E+05, 1.88E+05, 1.80E+05, 1.73E+05, 1.65E+05, 1.58E+05, 1.52E+05, 1.45E+05, 1.39E+05, 1.33E+05, 1.28E+05, 1.22E+05, 1.17E+05, 1.12E+05, 1.08E+05, 1.03E+05, 98889, 94740, 90773, 86967, 83324, 79831, 76487, 73284, 70217, 67272, 64463, 61758, 59200, 56642, 54387, 52016, 49861, 47793, 45793, 43879, 42046, 40288, 38607, 36992, 35450, 33971, 32554, 31197, 29896, 28651, 27457, 26314, 25219, 24169, 23163, 22201, 21278, 20394, 19548, 18736, 17959, 17214, 16501, 15817, 15162, 14535, 13933, 13357, 12805, 12277, 11770, 11284, 10819, 10373, 9945.7, 9536.2, 9144.2, 8768.2, 8407.8, 8062.3, 7731.4, 7414.3, 7110.3, 6818.9, 6539.6, 6272, 6015.6, 5769.6, 5533.8, 5307.9, 5091.5, 4883.8, 4684.6, 4493.8, 4311, 4135.5, 3967.4, 3806.2, 3651.7, 3503.4, 3360.9, 3224.6, 3094.1, 2969, 2848.9, 2733.8, 2623.5, 2517.8, 2416.4, 2319.2, 2225.9, 2136.6, 2050.9, 1968.7, 1890, 1814.5, 1742.1, 1672.7, 1606.1, 1542.4, 1481.2, 1422.6, 1366.4, 1312.6, 1260.9, 1211.5, 1164.1, 1118.6, 1075.1, 1033.4, 993.41, 955.14, 918.48, 883.36, 849.74, 817.52, 786.68, 757.18, 728.92, 701.89, 676.04, 651.28, 627.61, 604.97, 583.33, 562.64, 542.88, 523.99, 505.96, 488.75, 472.32, 456.64, 441.7, 427.45, 413.87, 400.94, 388.62, 376.91, 365.76, 355.16, 345.1, 335.54, 326.46, 317.86, 309.7, 301.97, 294.66, 287.75, 281.2, 275.02, 269.19, 263.68, 258.49, 253.59, 249.07, 244.73, 240.66, 236.81, 233.21, 229.82, 226.64, 223.66, 220.86, 218.24, 215.77, 213.46, 211.29, 209.27, 207.36, 205.57, 203.9, 202.32, 200.85, 199.46, 198.16, 196.93, 195.77, 194.68, 193.66, 192.68, 191.76, 190.89, 190.07, 189.29, 188.55, 187.85, 187.18, 186.55, 185.94, 185.37, 184.81, 184.28, 183.78, 183.3, 182.84, 182.4, 181.98, 181.57, 181.18, 180.81, 180.45, 180.1, 179.77, 179.45, 179.14, 178.85, 178.56, 178.28, 178.02, 177.76, 177.51, 177.27, 177.04, 176.81, 176.59, 176.38, 176.17, 175.97, 175.78, 175.59, 175.41, 175.23, 175.05, 174.88, 174.72];
phase_exp = [-1.4626, -1.4668, -1.4689, -1.4721, -1.4751, -1.4757, -1.4798, -1.4806, -1.4821, -1.4851, -1.4864, -1.4862, -1.4893, -1.4898, -1.4913, -1.4927, -1.4945, -1.4955, -1.4972, -1.4977, -1.4989, -1.4999, -1.5012, -1.5015, -1.5024, -1.5035, -1.505, -1.5055, -1.5062, -1.5072, -1.5077, -1.5084, -1.5086, -1.5095, -1.5102, -1.5111, -1.5114, -1.5121, -1.5126, -1.5135, -1.5137, -1.5143, -1.5147, -1.5151, -1.5153, -1.516, -1.5163, -1.5169, -1.517, -1.5175, -1.5175, -1.518, -1.5182, -1.5184, -1.5189, -1.5189, -1.5193, -1.5193, -1.5197, -1.5198, -1.5198, -1.5201, -1.5202, -1.5202, -1.5204, -1.5205, -1.5204, -1.5205, -1.5206, -1.5205, -1.5205, -1.5204, -1.5204, -1.5204, -1.5203, -1.5202, -1.5201, -1.5199, -1.5198, -1.5196, -1.5194, -1.5193, -1.519, -1.5188, -1.5185, -1.5182, -1.5179, -1.5178, -1.5174, -1.5175, -1.5172, -1.5165, -1.5158, -1.5154, -1.5149, -1.5145, -1.514, -1.5135, -1.513, -1.5125, -1.5119, -1.5113, -1.5108, -1.5101, -1.5095, -1.5089, -1.5082, -1.5075, -1.5068, -1.506, -1.5053, -1.5045, -1.5037, -1.5029, -1.502, -1.5012, -1.5003, -1.4994, -1.4984, -1.4975, -1.4965, -1.4954, -1.4944, -1.4933, -1.4923, -1.4911, -1.49, -1.4888, -1.4876, -1.4864, -1.4851, -1.4838, -1.4825, -1.4811, -1.4797, -1.4783, -1.4768, -1.4753, -1.4738, -1.4722, -1.4705, -1.4689, -1.4672, -1.4654, -1.4636, -1.4617, -1.4598, -1.4578, -1.4558, -1.4537, -1.4516, -1.4493, -1.447, -1.4447, -1.4423, -1.4398, -1.4372, -1.4345, -1.4317, -1.4289, -1.4259, -1.4228, -1.4197, -1.4164, -1.413, -1.4095, -1.4059, -1.4021, -1.3982, -1.3942, -1.39, -1.3856, -1.3811, -1.3765, -1.3716, -1.3666, -1.3614, -1.3561, -1.3505, -1.3447, -1.3387, -1.3324, -1.326, -1.3193, -1.3123, -1.3052, -1.2977, -1.29, -1.282, -1.2737, -1.2651, -1.2562, -1.2471, -1.2376, -1.2277, -1.2176, -1.2071, -1.1963, -1.1851, -1.1736, -1.1617, -1.1494, -1.1368, -1.1238, -1.1105, -1.0967, -1.0827, -1.0682, -1.0534, -1.0382, -1.0227, -1.0069, -0.9907, -0.97421, -0.95741, -0.94033, -0.92297, -0.90537, -0.88754, -0.8695, -0.85129, -0.83291, -0.81442, -0.79582, -0.77716, -0.75845, -0.73973, -0.72104, -0.7024, -0.68398, -0.66553, -0.64722, -0.62908, -0.61113, -0.59342, -0.57595, -0.55875, -0.54184, -0.52525, -0.50898, -0.49305, -0.47749, -0.46228, -0.44745, -0.433, -0.41893, -0.40528, -0.392, -0.37911, -0.36661, -0.3545, -0.34277, -0.33143, -0.32045, -0.30984, -0.2996, -0.28971, -0.28015, -0.27094, -0.26205, -0.25348, -0.24523, -0.23727, -0.2296, -0.22221, -0.21511, -0.20826, -0.20167, -0.19535, -0.18925, -0.18339, -0.17776, -0.17235, -0.16715, -0.16216, -0.15738, -0.15279, -0.14839, -0.14418, -0.14014, -0.13628, -0.1326, -0.12908, -0.12572, -0.12253, -0.11948, -0.11659, -0.11385, -0.11126, -0.1088, -0.10648, -0.10431, -0.10227, -0.10036, -0.098582, -0.096935, -0.095417, -0.09402, -0.092753, -0.09161];



% Initial values of the components
Rs = 1e2;
Rc = 1e6;
Cd = 1e-9;

% Définition de la fonction objectif
objetiveFunction = @(x) norm(sqrt(((x(1) + x(2) + x(3)^2*(2*pi*f).^2*x(1))./(1+(x(3)^2*(2*pi*f).^2)).^2 + ((x(2)*x(3)*(2*pi*f))./(1+(x(3)^2*(2*pi*f).^2)).^2)) - Z_exp));

% Initialisation des valeurs initiales des composants
x0 = [valeur initiale de Rs, valeur initiale de Rc, valeur initiale de Cd];

% Minimisation de la fonction objectif avec la méthode de Newton
options = optimoptions('fminunc', 'Algorithm', 'trust-region', 'Display', 'iter');
[x_opt, fval] = fminunc(objectiveFunction, x0, options);

% Valeurs optimales des composants
Rs_opt = x_opt(1);
Rc_opt = x_opt(2);
Cd_opt = x_opt(3);

% % Function to compute absolute impedance Zt
% function Zt = compute_abs_Zt(f, Rs, Rc, Cd)
%     w = 2 * pi * f;
%     tau = Rc * Cd;
%     Zt = sqrt(((Rs + Rc + tau^2*w.^2*Rs)./(1+tau^2*w.^2)).^2 + ((Rc*tau*w)./(1+tau^2*w.^2)).^2);
% end
% 
% % Function to compute phase
% function phase = compute_phase(f, Rs, Rc, Cd)
%     w = 2 * pi * f;
%     tau = Rc * Cd;
%     phase = atan2((Rc*tau*w)./(1+tau^2*w.^2), ((Rs + Rc + tau^2*w.^2*Rs)./(1+tau^2*w.^2)));
% end
% 
% function [objective, gradient] = objective_function(params, f, Z_exp)
%     Rs = params(1);
%     Rc = params(2);
%     Cd = params(3);
% 
%     Zt = compute_abs_Zt(f, Rs, Rc, Cd);
%     % Fonction objectif : Somme des carrés des écarts entre Zt et Z_exp
%     objective = sum((Zt - Z_exp).^2);
% 
%     % Calculation of the gradient
%     w = 2 * pi * f;
%     tau = Rc * Cd;
%     dZt_dRs = ((Rc + tau^2 * w.^2 * Rs)./(1 + tau^2 * w.^2));
%     dZt_dRc = ((Rs + Rc + tau^2 * w.^2 * Rs)./(1 + tau^2 * w.^2)) - ((Rs + Rc + tau^2 * w.^2 * Rs).^2 ./ (1 + tau^2 * w.^2).^2);
%     dZt_dCd = -((Rc * Rs * tau * w.^3)./(1 + tau^2 * w.^2).^2);
% 
%     gradient = [sum(2 * (Zt - Z_exp) .* dZt_dRs); sum(2 * (Zt - Z_exp) .* dZt_dRc); sum(2 * (Zt - Z_exp) .* dZt_dCd)];
% end
% 
% % Initialisation des valeurs initiales des paramètres Rs, Rc et Cd
% initial_guess = [Rs, Rc, Cd];
% 
% % Résolution du problème d'optimisation à l'aide de la méthode de Newton
% options = optimset('Display','iter'); % pour afficher les informations sur la convergence
% [optimized_params, ~, exitflag] = fsolve(@(params) objective_function(params, f, Z_exp), initial_guess, options);
% 
% % Vérification de la convergence
% if exitflag > 0
%     disp('Convergence atteinte.');
%     disp('Valeurs optimales des paramètres :');
%     disp(optimized_params);
% else
%     disp('La méthode de Newton n''a pas convergé.');
% end
% 
% % Extract the optimized parameters
% Rs_opt = optimized_params(1);
% Rc_opt = optimized_params(2);
% Cd_opt = optimized_params(3);
% 
% % Display the optimized parameters
% fprintf('Optimized Parameters:\n');
% fprintf('Rs = %.3f Ohms\n', Rs_opt);
% fprintf('Rc = %.3f Ohms\n', Rc_opt);
% fprintf('Cd = %.9f Farads\n', Cd_opt);
% 
% % Display the curves
% figure;
% Zt = compute_abs_Zt(f, Rs, Rc, Cd);
% Zt_opt = compute_abs_Zt(f, Rs_opt, Rc_opt, Cd_opt);
% loglog(f,Z_exp,f,Zt_opt,f,Zt);
% title('abs');
% legend('Z-exp','Zt-opt','Zt');
% 
% figure;
% phase = compute_phase(f, Rs, Rc, Cd);
% phase_opt = compute_phase(f, Rs_opt, Rc_opt, Cd_opt);
% semilogx(f,phase_exp,f,phase_opt,f,phase);
% title('phase');
% legend('phase-exp','phase-opt','phase');
